---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Timeline from '~/components/ui/Timeline.astro';
import Headline from '~/components/ui/Headline.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import type { Steps as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  image = await Astro.slots.render('image'),
  callToAction = await Astro.slots.render('callToAction'),
  isReversed = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl ${classes?.container ?? ''}`} bg={bg}>
  <div class:list={['flex flex-col gap-8 md:gap-12', { 'md:flex-row-reverse': isReversed }, { 'md:flex-row': image }]}>
    <div class:list={['md:py-4 md:self-center', { 'md:basis-1/2': image }, { 'w-full': !image }]}>
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={{
          container: 'text-left rtl:text-right',
          title: 'text-3xl lg:text-4xl',
          ...((classes?.headline as object) ?? {}),
        }}
      />
      <Timeline items={items} classes={classes?.items as Record<string, never>} />
    </div>
    {
      image && (
        <div class="relative md:basis-1/2">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <Image
              class="inset-0 object-cover object-top w-full rounded-md shadow-lg md:absolute md:h-full bg-gray-400 dark:bg-slate-700"
              widths={[400, 768]}
              sizes="(max-width: 768px) 100vw, 432px"
              width={432}
              height={768}
              layout="cover"
              src={image?.src}
              alt={image?.alt || ''}
            />
          )}
        </div>
      )
    }
  </div>
  <div class="w-full text-center md:text-left rtl:md:text-right flex flex-col items-center">
    {
      typeof callToAction === 'string' ? (
        <Fragment set:html={callToAction} />
      ) : (
        callToAction &&
        callToAction.text &&
        callToAction.href && <Button variant="primary" {...callToAction} class="mb-12 w-auto" />
      )
    }
  </div>
  <!-- CTA Button at the end -->
  <!-- <div class="mt-8 text-center">
    <a
      href={ctaUrl}
      class="inline-block px-6 py-3 text-white bg-blue-600 rounded-md shadow hover:bg-blue-700 focus:outline-none focus:ring focus:ring-blue-300"
    >
      {ctaLabel}
    </a>
  </div> -->
</WidgetWrapper>
