generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @db.VarChar(256)
  name          String       @db.VarChar(256)
  email         String       @db.VarChar(512)
  emailVerified Boolean
  image         String?      @db.VarChar(1024)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Profile       Profile[]
  Submission    Submission[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @db.VarChar(256)
  expiresAt DateTime
  token     String   @db.VarChar(256)
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.VarChar(100)
  userAgent String?  @db.VarChar(512)
  userId    String   @db.VarChar(256)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @db.VarChar(256)
  accountId             String    @db.VarChar(256)
  providerId            String    @db.VarChar(256)
  userId                String    @db.VarChar(256)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.VarChar(256)
  refreshToken          String?   @db.VarChar(256)
  idToken               String?   @db.VarChar(256)
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.VarChar(256)
  password              String?   @db.VarChar(256)
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @db.VarChar(256)
  identifier String    @db.VarChar(256)
  value      String    @db.VarChar(256)
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Profile {
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.VarChar(512)
  name    String   @db.VarChar(256)
  path    String   @db.VarChar(512)
  values  Json
  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id(name: "id", fields: [userId, name])
  @@index([userId, name, path])
  @@map("profile")
}

model Submission {
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.VarChar(512)
  name    String   @db.VarChar(256)
  path    String   @db.VarChar(512)
  values  Json
  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id(name: "id", fields: [userId, name, created])
  @@index([userId, name, path])
  @@map("submission")
}
